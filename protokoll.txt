
>
Karli nägemus võrguprotokollist.

Lihtsuse huvideks võiks kasutada DataInputStream/DataOutputStream-i, siis ei pea ise leiutama andmepakettide mõõtude pärast.
Kõigepealt saadetakse int mis on käsu number ning vastavalt käsule alati kindel hulk datat kindlal kujul. Kui teine pool saab inti, siis teab mida edasi oodata. Kui tuleb midagi muud, siis võib vabalt õhku lennata.
Klient peaks kannatama asünkroonset suhtlust, st. saama hakkama kui server enne küsimusele vastamist ise midagi muud vahepeal küsib

(siia võiks mingi viisaka tabeli teha, hetkel pole ideed kuidas seda formaatida)

>  - klient saadab serverile
<  - server saadab kliendile

i: int   s: string  c: char  Käsu numbril loetavuse huvides i: eest ära jäetud

> 1  s: username s:parool   # uue kontro registreerimine
< 1  i: status s: errormessage # status: 1: OK  -1: ERR  errormessage: misjuhtus   
> 2  s: username s:parool   # sisselogimine
< 2  i: status s: errormessage  # sama mis <1
> 3    # get userlist
< 3 i: userid s: username   # lobby userlist ja/või logis lobbysse
< 4 i: userid s: username   # lobbyst logis välja
> 4                         # do logout
> 5 s: chatmessage          # kirjuta midagi lobby chatti
< 5 i: userid s:username s: chatmessage          # lobby chatti ütles keegi midagi    (kas useri info on oluline või võib message sees olla)? Esialgu las olla message sees: Näiteks user+"<< "+message...
> 6  # get current running games
< 6 i: gameid s: username1 s: username2
> 7 i: userid               # saadad userile userID kutse mängida
< 7 i: userid s: username   # userid/username saadab sulle kutse mängida. aksepteerimiseks saada kutse vastu (rida eespool)
< 8 i: userid i: gameid     # server ütleb, et teil algab mäng (kahepoolne kutse toimis)
> 9 i: userid               # klient keeldub kutsest
< 9: i: userid s: username  # teiselt poolt tuleb tagasi keeldumine 
> 10 i: alates i: mitu      # klient küsib mängude nimekirja  (default alates 0 - alustame uuematest)
< 10 s: stringina mängulogi # mänguNR,player1,player1,player2,player2\n
> 11 i: mänguNR                  # klient küsib mängu järelvaatamist
< 11 i: mänguNR i: player1 s: player1 i: player2 s: player2 s: tegevuslogi   # server annab vastu tegevuslogi kujul   timestamp,userid,tickID,tegevus\n  (millal, kes, mistiks,mistegi)     mistegi:  0=tiks; {'I', 'O', 'Z', 'S', 'T', 'J', 'L'}=uusklots


< 100 i: tickid                    # serveri "tiks", et klotsid langeks. ID, et neil vahet teha
< 101 i: tickid c: action: userid  # server saadab teise useri liigutuse  tickid: mis tiksu järel pidi see olemas
> 101 i: tickid c: action          # klient saadab välja oma liigutuse  1: üles   2: drop   3: vasakule   4: paremale 
> 102                              # klient ütleb, et ta lahkus mängust
< 102 i: userid                    # teine pool lahkus
> 103                              # klient küsib uue klotsi (endale)
< 103  i: kellele c: klots         # server annab klotsi (saadab kõigile)   {'I', 'O', 'Z', 'S', 'T', 'J', 'L'};

< 105 i: kellelt s: username  s: chatmessage    # teine mängija ütles midagi
> 105 i: kellele s: chatmessage                 # mängija ütleb midagi




